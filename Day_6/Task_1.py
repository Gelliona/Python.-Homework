"""
Реализовать функцию my_func(), которая принимает три позиционных аргумента,
и возвращает сумму двух наибольших аргументов.
"""

from timeit import timeit


'Моё решение'


def my_func(num1, num2, num3):
    return num1 + num2 + num3 - min(num1, num2, num3)


'Альтернативное решение'


def new_func(num1, num2, num3):
    my_list = [int(num1), int(num2), int(num3)]
    my_list.sort()
    my_list.pop(0)
    total = sum(my_list)
    return total


print("Затраты времени при расчете моим способом: ")
print(timeit("my_func(15, 36, 43)", globals=globals(), number=100000))
print()
print("Затраты времени при расчете альтернативным способом: ")
print(timeit("new_func(15, 36, 43)", globals=globals(), number=100000))

"""
Данная задача была мной выполнена с помощью функции my_func. Чтобы рассмотреть
вариант оптимизации задачи, добавила альтернативный вариант решения
с использованием массива и встроенных функций сортировки, удаления наименьшего
элемента и сложения оставшихся двух элементов.
Как показали замеры времени, в данном случае альтернативный вариант
проигрывает по затратам времени, так как в нём, помимо сложения двух
наибольших аргументов, используются дополнительные действия: сортировка списка,
выбор и удаление первого элемента. В моём варианте используются всего
3 простых математических действия, поэтому он быстрее.
"""
